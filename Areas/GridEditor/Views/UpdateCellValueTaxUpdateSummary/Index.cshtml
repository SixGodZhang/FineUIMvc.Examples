@{
    ViewBag.Title = "GridEditor/UpdateCellValueTaxUpdateSummary";
    var F = Html.F();
}

@section head {

    <style>
        .f-grid-row-summary .f-grid-cell-inner {
            font-weight: bold;
            color: red;
        }
    </style>

}


@section body {

    @(F.Grid().IsFluid(true).CssClass("blockpanel").ID("Grid1").ShowBorder(true).ShowHeader(true).Title("表格（双击编辑）").Height(350).DataIDField("Id").DataTextField("Name").AllowCellEditing(true).ClicksToEdit(2).EnableCheckBoxSelect(true).EnableSummary(true).SummaryPosition(SummaryPosition.Bottom)
        .Columns(
            F.RowNumberField(),
            F.RenderField().ColumnID("Name").DataField("Name").HeaderText("应税名称").ExpandUnusedSpace(true)
                .Editor(
                    F.TextBox().ID("tbxEditorName")
                ),
            F.RenderField().Width(150).ColumnID("Price").DataField("Price").FieldType(FieldType.Float).HeaderText("金额（不含税）")
                .Editor(
                    F.NumberBox().ID("TextBox1").NoDecimal(false).NoNegative(true).Required(true)
                ),
            F.RenderField().Width(150).ColumnID("PriceWithTax").DataField("PriceWithTax").FieldType(FieldType.Float).HeaderText("金额（含税）")
                .Editor(
                    F.NumberBox().ID("NumberBox1").NoDecimal(false).NoNegative(true).Required(true)
                ),
            F.RenderField().Width(100).ColumnID("TaxPercent").DataField("TaxPercent").FieldType(FieldType.Float).HeaderText("征收率"),
            F.RenderField().Width(150).ColumnID("Tax").DataField("Tax").FieldType(FieldType.Float).HeaderText("税额")
                .Editor(
                    F.NumberBox().ID("NumberBox2").NoDecimal(false).NoNegative(true).Required(true)
                ),
            F.RenderField().Width(80).EnableHeaderMenu(false).RendererFunction("renderActions")
        )
        .Toolbars(
            F.Toolbar().ID("Toolbar1")
                .Items(
                    F.Button().ID("btnNew").Text("新增数据").Icon(Icon.Add).Listener("click", "onNewClick"),
                    F.Button().ID("btnDelete").Text("删除选中行").Icon(Icon.Delete).Listener("click", "onDeleteClick"),
                    F.ToolbarFill(),
                    F.Button().ID("btnReset").Text("重置表格数据").Listener("click", "onResetClick")
                )
        ).Listener("afteredit", "onGrid1AfterEdit").Listener("dataload", "onGrid1DataLoad").DataSource(ViewBag.Grid1DataSource)
    )
    <br>

    @(F.Button().ID("btnSubmit").Text("保存数据").Listener("click", "onSubmitClick"))

    <br>
    @(F.Label().ID("labResult"))

    <br />
    注：编辑[金额（不含税）]、[金额（含税）]、[税额]中的任一列，其他两列的值都会相应的改变。
}

@section script {

    <script src="~/res/js/grid.js"></script>

    <script>

        function updateSummary() {
            var grid1 = F.ui.Grid1, priceTotal = 0, priceWithTaxTotal = 0, taxTotal = 0;
            grid1.getRowEls().each(function (index, tr) {
                var price = grid1.getCellValue(tr, 'Price');
                var priceWithTax = grid1.getCellValue(tr, 'PriceWithTax');
                var tax = grid1.getCellValue(tr, 'Tax');

                price = isNaN(price) ? 0 : price;
                priceWithTax = isNaN(priceWithTax) ? 0 : priceWithTax;
                tax = isNaN(tax) ? 0 : tax;

                priceTotal += price;
                priceWithTaxTotal += priceWithTax;
                taxTotal += tax;
            });

            // 第三个参数 true，强制更新，不显示左上角的更改标识
            grid1.updateSummaryCellValue('Price', priceTotal.toFixed(2), true);
            grid1.updateSummaryCellValue('PriceWithTax', priceWithTaxTotal.toFixed(2), true);
            grid1.updateSummaryCellValue('Tax', taxTotal.toFixed(2), true);
        }


        // 表格数据加载后，重新计算合计行
        function onGrid1DataLoad() {
            updateSummary();
        }

        function onGrid1AfterEdit(event, value, params) {
            var grid1 = this, columnId = params.columnId, rowId = params.rowId;

            // 本次操作过程中禁止触发事件（防止循环事件）
            F.noEvent(function () {
                if (columnId === 'Price') {
                    var priceWithTax = (value * 1.03).toFixed(2);
                    var tax = (parseFloat(priceWithTax) - value).toFixed(2);

                    grid1.updateCellValue(rowId, 'PriceWithTax', priceWithTax);
                    grid1.updateCellValue(rowId, 'Tax', tax);
                } else if (columnId === 'PriceWithTax') {
                    var price = (value / 1.03).toFixed(2);
                    var tax = (value - parseFloat(price)).toFixed(2);

                    grid1.updateCellValue(rowId, 'Price', price);
                    grid1.updateCellValue(rowId, 'Tax', tax);
                } else if (columnId === 'Tax') {
                    var price = (value / 0.03).toFixed(2);
                    var priceWithTax = (value + parseFloat(price)).toFixed(2);

                    grid1.updateCellValue(rowId, 'Price', price);
                    grid1.updateCellValue(rowId, 'PriceWithTax', priceWithTax);
                }

                // 更新合计行
                updateSummary();
            });
        }


        function onSubmitClick(event) {
            var grid1 = F.ui.Grid1;

            // 触发后台事件
            F.doPostBack('@Url.Action("btnSubmit_Click")', {
                fields: grid1.fields,
                mergedData: grid1.getMergedData()
            });
        }

        function onNewClick(event) {
            var grid1 = F.ui.Grid1;

            // 新增一行（返回新增行的ID）
            var addedRowId = grid1.addNewRecord({
                'Name': '技术服务',
                'TaxPercent': 0.03,
            }, true);

        }

        function onResetClick(event) {
            F.confirm({
                message: '确定要重置表格数据？',
                ok: function () {
                    F.ui.Grid1.rejectChanges();
                }
            });
        }

        function onDeleteClick(event) {
            var grid1 = F.ui.Grid1;
            if (!grid1.hasSelection()) {
                F.alert('没有选中项！');
                return;
            }

            var selectedRows = grid1.getSelectedRows();
            F.confirm({
                message: '你确定要删除选中的&nbsp;<b>' + selectedRows.length + '</b>&nbsp;行数据吗？',
                target: '_top',
                ok: function () {
                    grid1.deleteRows(selectedRows);
                }
            });
        }


        function renderActions(value, params) {
            var deleteImageUrl = '@Url.Content("~/res/icon/delete.png")';
            return '<a class="action-btn delete" href="javascript:;"><img class="f-grid-cell-icon" src="' + deleteImageUrl + '"></a>';
        }

        F.ready(function () {

            var grid1 = F.ui.Grid1;
            grid1.el.on('click', 'a.action-btn.delete', function (event) {
                var cnode = $(this);
                var rowData = grid1.getRowData(cnode.closest('.f-grid-row'));

                F.confirm({
                    message: '删除选中行？',
                    target: '_top',
                    ok: function () {
                        grid1.deleteRow(rowData);
                    }
                });
            });

            // 初始增加一个空白行
            onNewClick();

        });

    </script>
}