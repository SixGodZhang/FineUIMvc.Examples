@{
    ViewBag.Title = "GridEditor/DropDownBoxGridMultiPaging";
    var F = Html.F();
}


@section body {

    @(F.Grid().IsFluid(true).CssClass("blockpanel").ID("Grid1").ShowBorder(true).ShowHeader(true).Title("表格（单击编辑）").DataIDField("Id").DataTextField("Name").AllowCellEditing(true).ClicksToEdit(1)
        .Columns(
            F.RowNumberField(),
            F.RenderField().Width(100).ColumnID("Name").DataField("Name").HeaderText("姓名")
                .Editor(
                    F.TextBox().ID("tbxName").Required(true)
                ),
            F.RenderField().Width(100).ColumnID("Gender").DataField("Gender").FieldType(FieldType.Int).RendererFunction("renderGender").HeaderText("性别")
                .Editor(
                    F.DropDownList().ID("ddlGender").Required(true)
                        .Items(
                            F.ListItem().Text("男").Value("1"),
                            F.ListItem().Text("女").Value("0")
                        )
                ),
            F.RenderField().Width(100).ColumnID("EntranceYear").DataField("EntranceYear").FieldType(FieldType.Int).HeaderText("入学年份")
                .Editor(
                    F.NumberBox().ID("nbxEntranceYear").NoDecimal(true).NoNegative(true).MinValue(2000).MaxValue(2025)
                ),
            F.RenderField().Width(120).ColumnID("EntranceDate").DataField("EntranceDate").FieldType(FieldType.Date).Renderer(Renderer.Date).RendererArgument("yyyy-MM-dd").HeaderText("入学日期")
                .Editor(
                    F.DatePicker().ID("dpEntranceDate").Required(true)
                ),
            F.RenderCheckField().Width(100).ColumnID("AtSchool").DataField("AtSchool").HeaderText("是否在校"),
            F.RenderField().ColumnID("Hobby").DataField("Hobby").ExpandUnusedSpace(true).HeaderText("兴趣爱好").RendererFunction("renderHobby").EditSetterFunction("editSetterHobby")
                .Editor(
                    F.DropDownBox().ID("DropDownBox1").EmptyText("请选择").EnableMultiSelect(true).AutoShowClearIcon(true)
                        .PopPanel(
                            F.Grid().ID("Grid2").ShowBorder(true).ShowHeader(false).EnableCheckBoxSelect(true).KeepCurrentSelection(true).DataIDField("Code").DataTextField("Name").EnableMultiSelect(true).Hidden(true).AllowPaging(true).PageSize(3).ShowPagingMessage(false).PagingType(PagingType.NumberButton)
                                .Columns(
                                    F.RowNumberField(),
                                    F.RenderField().ColumnID("Code").Width(100).DataField("Code").HeaderText("代码"),
                                    F.RenderField().ColumnID("Name").ExpandUnusedSpace(true).DataField("Name").HeaderText("姓名")
                                ).DataSource(ViewBag.Grid2DataSource)
                        )
                )
        ).DataSource(ViewBag.Grid1DataSource)
    )
    <br>

    @(F.Button().ID("btnSubmit").Text("保存数据").OnClick(Url.Action("btnSubmit_Click"), "Grid1"))

    <br>
    @(F.Label().ID("labResult"))

}

@section script {

    <script src="~/res/js/grid.js"></script>

    <script>

        @Html.Raw(ViewBag.hobbyTableScript)

        function getTextByHobbies(value) {
            var hobbies = value.split(',');

            // 表格分页时，需要的数据可能存在于其他分页中，所以不能从表格数据获取了
            //return $.map(hobbies, function (hobby, index) {
            //    return grid2.getRowData(hobby).text;
            //}).join(', ');
            var result = [];
            $.each(window.hobbyTable, function (index, hobby) {
                if ($.inArray(hobby.Code, hobbies) >= 0) {
                    result.push(hobby.Name);
                }
            });

            return result;
        }

        function renderHobby(value) {
            if (!value) {
                return '';
            }

            return getTextByHobbies(value).join(', ');
        }


        // 自定义编辑器设置函数（从单元格进入Editor）
        function editSetterHobby(editor, val, columnId, rowId) {
            editor.setValue(val, getTextByHobbies(val));
        }

    </script>
}