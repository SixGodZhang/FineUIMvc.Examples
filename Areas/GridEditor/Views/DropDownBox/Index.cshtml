@{
    ViewBag.Title = "GridEditor/DropDownBox";
    var F = Html.F();
}


@section body {

    @(F.Grid().IsFluid(true).CssClass("blockpanel").ID("Grid1").ShowBorder(true).ShowHeader(true).Title("表格（进入编辑状态后，从下拉表格中选择用户）").Height(350).DataIDField("Id").DataTextField("Name").AllowCellEditing(true).ClicksToEdit(1)
        .Columns(
            F.RowNumberField(),
            F.RenderField().Width(100).ColumnID("Name").DataField("Name").HeaderText("姓名（隐藏列，用来将用户名保存到数据库中）").Hidden(true),
            F.RenderField().Width(100).ColumnID("Code").DataField("Code").HeaderText("姓名").RendererFunction("renderCode")
                .Editor(
                    F.DropDownBox().ID("DropDownBox1").EmptyText("请选择").MatchFieldWidth(false).EnableMultiSelect(false)
                        .PopPanel(
                            F.Grid().ID("Grid2").ShowBorder(true).ShowHeader(false).DataIDField("Id").DataTextField("Name").Width(650).Height(300).EnableMultiSelect(false).Hidden(true)
                                .Columns(
                                    F.RowNumberField(),
                                    F.RenderField().ColumnID("Name").Width(100).DataField("Name").HeaderText("姓名"),
                                    F.RenderField().Width(100).ColumnID("Gender").DataField("Gender").FieldType(FieldType.Int).RendererFunction("renderGender").HeaderText("性别"),
                                    F.RenderField().ColumnID("EntranceYear").Width(80).DataField("EntranceYear").HeaderText("入学年份"),
                                    F.RenderField().ColumnID("EntranceDate").Width(100).DataField("EntranceDate").FieldType(FieldType.Date).Renderer(Renderer.Date).RendererArgument("yyyy-MM-dd").HeaderText("入学日期"),
                                    F.RenderCheckField().ColumnID("AtSchool").Width(80).DataField("AtSchool").HeaderText("是否在校"),
                                    F.RenderField().ColumnID("Major").DataField("Major").HeaderText("所学专业").ExpandUnusedSpace(true)
                                ).Listener("rowclick", "onGrid2RowClick")
                                .DataSource(DataSourceUtil.GetDataTable())
                        )
                ),
            F.RenderField().Width(100).ColumnID("Code2").DataField("Code").HeaderText("编码"),
            F.RenderField().Width(100).ColumnID("Gender").DataField("Gender").FieldType(FieldType.Int).RendererFunction("renderGender").HeaderText("性别")
                .Editor(
                    F.DropDownList().ID("ddlGender").Required(true)
                        .Items(
                            F.ListItem().Text("男").Value("1"),
                            F.ListItem().Text("女").Value("0")
                        )
                ),
            F.RenderField().Width(100).ColumnID("EntranceYear").DataField("EntranceYear").FieldType(FieldType.Int).HeaderText("入学年份")
                .Editor(
                    F.NumberBox().ID("nbxEntranceYear").NoDecimal(true).NoNegative(true).MinValue(2000).MaxValue(2025)
                ),
            F.RenderField().Width(120).ColumnID("EntranceDate").DataField("EntranceDate").FieldType(FieldType.Date).Renderer(Renderer.Date).RendererArgument("yyyy-MM-dd").HeaderText("入学日期")
                .Editor(
                    F.DatePicker().ID("dpEntranceDate").Required(true)
                ),
            F.RenderCheckField().Width(100).ColumnID("AtSchool").DataField("AtSchool").HeaderText("是否在校"),
            F.RenderField().ColumnID("Major").DataField("Major").ExpandUnusedSpace(true).HeaderText("所学专业")
                .Editor(
                    F.TextBox().ID("tbxMajor").Required(true)
                ),
            F.RenderField().Width(80).EnableHeaderMenu(false).RendererFunction("renderActions")
        )
        .Toolbars(
            F.Toolbar().ID("Toolbar1")
                .Items(
                    F.Button().ID("btnNew").Text("新增数据").Icon(Icon.Add).Listener("click", "onNewClick"),
                    F.Button().ID("btnDelete").Text("删除选中行").Icon(Icon.Delete).Listener("click", "onDeleteClick"),
                    F.ToolbarFill(),
                    F.Button().ID("btnReset").Text("重置表格数据").Listener("click", "onResetClick")
                )
        ).DataSource(ViewBag.Grid1DataSource)
    )
    <br>

    @(F.Button().ID("btnSubmit").Text("保存数据").OnClick(Url.Action("btnSubmit_Click"), "Grid1"))

    <br>
    @(F.Label().ID("labResult"))

    <br>
    <br>
    注：
    <ul>
        <li>姓名列的内部数据其实是用户编码，通过 RendererFunction 来转换为姓名</li>
        <li>编码到姓名的转换是通过查询下拉表格数据来完成的，因此如果表格存在分页，这种方式就无效了</li>
    </ul>
}

@section script {

    <script src="~/res/js/grid.js"></script>

    <script>

        function renderCode(value) {
            if (!value) {
                return '';
            }

            var grid2 = F.ui.Grid2;
            return grid2.getRowData(value).text;
        }


        function onGrid2RowClick(event, grid2RowId) {
            var grid1 = F.ui.Grid1;
            var grid1RowId = grid1.getSelectedCell()[0];
            var rowValue = this.getRowValue(grid2RowId);

            grid1.updateCellValue(grid1RowId, {
                'Code2': grid2RowId,
                'Code': grid2RowId,
                'Name': rowValue.Name,
                'Gender': rowValue.Gender,
                'EntranceYear': rowValue.EntranceYear,
                'EntranceDate': rowValue.EntranceDate,
                'AtSchool': rowValue.AtSchool,
                'Major': rowValue.Major
            });
        }


        function onNewClick(event) {
            var grid1 = F.ui.Grid1;

            // 新增一行（返回新增行的ID）
            var addedRowId = grid1.addNewRecord({
                'Name': '新用户',
                'Gender': '1',
                'EntranceYear': '2015',
                'EntranceDate': '2016-11-15',
                'AtSchool': false,
                'Major': '化学系'
            }, true);

        }

        function onResetClick(event) {
            F.confirm({
                message: '确定要重置表格数据？',
                ok: function () {
                    F.ui.Grid1.rejectChanges();
                }
            });
        }

        function onDeleteClick(event) {
            var grid1 = F.ui.Grid1;
            if (!grid1.hasSelection()) {
                F.alert('没有选中项！');
                return;
            }

            var selectedRows = grid1.getSelectedRows();
            F.confirm({
                message: '你确定要删除选中的&nbsp;<b>' + selectedRows.length + '</b>&nbsp;行数据吗？',
                target: '_top',
                ok: function () {
                    grid1.deleteRows(selectedRows);
                }
            });
        }


        function renderActions(value, params) {
            var deleteImageUrl = '@Url.Content("~/res/icon/delete.png")';
            return '<a class="action-btn delete" href="javascript:;"><img class="f-grid-cell-icon" src="' + deleteImageUrl + '"></a>';
        }

        F.ready(function () {

            var grid1 = F.ui.Grid1; if (!grid1) return;
            grid1.el.on('click', 'a.action-btn.delete', function (event) {
                var cnode = $(this);
                var rowData = grid1.getRowData(cnode.closest('.f-grid-row'));

                F.confirm({
                    message: '删除选中行？',
                    target: '_top',
                    ok: function () {
                        grid1.deleteRow(rowData);
                    }
                });
            });

        });

    </script>
}